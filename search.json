[
  {
    "objectID": "pages/001-workspace-setup.html",
    "href": "pages/001-workspace-setup.html",
    "title": "Workspace setup",
    "section": "",
    "text": "There are lots of different ways to run Python code and many tools to help you write it. You don’t require any special tools to create a Python script, a simple text editor like Notepad on Windows is sufficient. More advanced tools include things like Jupyter Notebooks and IDEs like PyCharm or Visual Studio Code.\nFor this workshop we will be keeping things as simple as possible in order to allow us to focus on the topics we’re learning without having to learn too many extra tools along the way.\nFor the purpose of this course we will be using a free tool called JupyterLab which provides you with a local editor in your web browser where you can write and run Python code. The easiest way to get access to JupyterLab is to install Anaconda which is a piece of software which includes Python along with lots of other tools. It is freely available for Windows, MacOS and Linux.\nAnaconda can be installed into your home area on your computer so if you are on a work laptop, for example, you will not need any special permissions. Once Anaconda is installed, start “Anaconda Navigator” and press the JupyterLab button on the main screen:\n\nThis will open JupyterLab in your default web browser and will look something like this:\n\nThe way that we will be setting up the space is to have a text editor on the left-hand side of the screen and a terminal on the right hand side. We’ll use the editor to write our code and the terminal to run it.\nIn the launcher tab, scoll down to the “Text File” entry and click that. It will turn the editor into a text editor. Then go to File → New and select “Terminal”. It will now have two tabs inside the interface, one labelled “untitled.txt” and the other labelled “Terminal 1”:\n\nThe contents of the Terminal tab will likely be a little different on your computer, compared to what is shown in thise images but that is ok.\nTo make our lives easier, let’s rearange things so that we can see the text editor at the same time as the terminal. Do this by pressing and holding down the left mouse button on the tab that says “Terminal 1” and slowly dragging it to the right-hand side of the window. You’ll see a blue outline like this:\n\nRelease the mouse button and you’ll end up with the two showing side-by-side:\n\n\nWorking directory\nSetting the correct working directory helps organize your project files and ensures that your code can find necessary resources and dependencies. We will revisit this concept later on, but for now be mindful that the space where you save your scripts has to be the same than the working directory in your Command Prompt/Terminal.\nIf you are using the Command Prompt (Windows) you can check your current directory with\n\n\nCommand Prompt\n\ncd\n\nIf you are using a Terminal (MacOS and Linux) you can check your current directory with\n\n\nTerminal\n\npwd\n\nWe’re now ready to get started!",
    "crumbs": [
      "Workspace setup"
    ]
  },
  {
    "objectID": "pages/011-string-formatting.html",
    "href": "pages/011-string-formatting.html",
    "title": "String formatting",
    "section": "",
    "text": "Being able to print things (on the screen for example) is a fundamental part of interacting with a programming language. So far, we’ve kept it simple by passing the data we want to print directly to print() using the fact that if you pass multiple arguments then it will print each of them, separated by spaces, combining our data with a message:\n\n\n\nformat.py\n\nmy_num = 42\n\nprint(\"My num is\", my_num)\n\n\nMy num is 42\n\n\nThis works perfectly well but you are using the implicit space that’s added by print as part of your sentence. What we can do instead is create a string which contains the message we want to print and put special placeholders inside it where we want our data to appear. There’s a few different ways to do this in Python (an older but still valid method you may see uses % and another uses a format() function) but for this course we will use the method called f-strings which was introduced in Python 3.6 (released December 2016).\nIf you put a single f directly in front of the string that you are creating, it will enable a special string mode which lets you place {} inside the string with a variable name between the curly brackets {}:\n\n\n\nformat.py\n\nanswer = 42\npi = 3.14159\n\nprint(f\"The answer is {answer} and pi is {pi}\")\n\n\nThe answer is 42 and pi is 3.14159\n\n\nWe call this process of substituting values of variables into placeholders string interpolation, and you can have as many interpolations in a string as you like.\n\n\n\n\n\n\nExercise\n\n\n\nFor many of the exercises here, we are going to be working on some Python code which converts to and from Morse Code. In each section we will add or change the code so make sure that you don’t skip any exercises.\nCopy the following code in the text editor into a script called encode.py and run it in the terminal with python encode.py or python3 encode.py to check that it works.\n\n\n\nencode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--','4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..','9':'----.', ' ':'/'\n}\n\nmessage = \"please help\"\n\n# `morse` is a list which will eventually contain the \n# strings for each morse code letter in the message.\nmorse = []\n\nfor letter in message:\n  morse_letter = letter_to_morse[letter]\n  morse.append(morse_letter)\n\n# We need to join together Morse code letters with spaces\nmorse_message = \" \".join(morse)\n  \nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {morse_message}\")\n\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe following code should be put into a file called encode.py using the text editor in JupyterLab:\n\n\n\nencode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\nmessage = \"please help\"\n\n# `morse` is a list which will eventually contain the \n# strings for each morse code letter in the message.\nmorse = []\n\nfor letter in message:\n    morse_letter = letter_to_morse[letter]\n    morse.append(morse_letter)\n\n# We need to join together Morse code letters with spaces\nmorse_message = \" \".join(morse)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {morse_message}\")\n\n\nIncoming message: please help\n   Morse encoded: .--. .-.. . .- ... . / .... . .-.. .--.",
    "crumbs": [
      "Using advanced data types and methods",
      "String formatting"
    ]
  },
  {
    "objectID": "pages/980-summary.html",
    "href": "pages/980-summary.html",
    "title": "Summary",
    "section": "",
    "text": "That’s all we have for this workshop. By now you should have a better understanding of how you can make your code more easily shared and reusable. In this workshow we have covered:\n\nHow to make you life easier with string formatting\nHow to use dictionaries\nUsing the Python standard library to find and use useful functions\nWays of bundling up your code into reusable units with functions\nMaking it possible to share your code with others by moving code into modules\nHow to produce custom errors\nHow to compactly generate lists with list comprehensions",
    "crumbs": [
      "Summary"
    ]
  },
  {
    "objectID": "pages/013-list-comprehensions.html",
    "href": "pages/013-list-comprehensions.html",
    "title": "List comprehensions",
    "section": "",
    "text": "In this section we will see something a little different to the other parts of this session. Rather than being a technique for making your code more easily sharable, reliable or user-friendly, it’s instead a language feature which can make your life easier.\nThere’s a common pattern that you will see come up a lot in programming in general and and Python in particular and that is “loop-append”. We’ve done it already in the morse code exercises. Let’s look at a section of encode first:\nmorse = []\n\nfor letter in message:\n    letter = letter.lower()\n    morse_letter = letter_to_morse[letter]\n    morse.append(morse_letter)\n\nmorse_message = \" \".join(morse)\nThe code first creates an empty list, knowing full-well that it’s about to be filled up. The next three lines then loop over some input container (message) and use some result of that to iteratively append to the end of morse.\nfor loops are useful when you want to do something for each item in a list but what we’re doing here is taking one container and transforming it into something new. The purpose of this code is to create the new container, not to use the old one.\nThis is such a common pattern that Python has special built-in syntax for doing this loop-append in one go called list comprehension. Taking a simpler example for now of an input of a range function and the output being the square of the inputs:\n\ns = []\nfor i in range(4):\n    s.append(i*i)\n\ns\n\n[0, 1, 4, 9]\n\n\nWe end up outputting \\(0^2\\), \\(1^2\\), \\(2^2\\) and \\(3^2\\). The equivalent with a list comprehension would be:\n\n[i*i for i in range(4)]\n\n[0, 1, 4, 9]\n\n\nYou can see that it has output exactly the same answer but was one in one line instead of four. You might recognise some familiar features in there but they’re not in the usual order. Let’s break it apart, step-by-step:\nWe start with the outer square brackets. They’re doing a similar things here to when you create a normal list like [1, 2, 3] but in this situation, due to what’s inside they work a little differently but the result is still a normal Python list:\n↓                     ↓\n[i*i for i in range(4)]\n\nThe next part is the input for the comprehension. This syntax is taken from the normal for loop syntax and works in the same way. We’re saying that we want to loop over range(4) and each time round the loop, we will use the variable i to refer to the current value:\n              ↓\n[i*i for i in range(4)]\n\nThe last part is where it differs. Rather than the body of the loop going on a new line after a colon, the body goes before the for keyword. You can only have a single expression here, not multiple lines of code. Also, there’s no need for an explicit append call. Whatever is written in that place will be added into the list as it is created:\n  ↓\n[i*i for i in range(4)]\n\nList comprehensions are powerful because they allow you to do a lot in a single line but that can be an issue of you try to do too much and it becomes very noisy. We would suggest that you try to keep your list comprehensions not much more complicated than the example we saw above.\n\n\n\n\n\n\nExercise\n\n\n\nAdapt encode function in the below script to use list comprehensions for doing the conversion.\n\n\n\nencode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\nencoded_message = encode(message)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {encoded_message}\")\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--\n\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n\n\nencode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\ndef encode(message):\n\n    morse = [letter_to_morse[letter] for letter in message.lower()]\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\nencoded_message = encode(message)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {encoded_message}\")\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--",
    "crumbs": [
      "Using advanced data types and methods",
      "List comprehensions"
    ]
  },
  {
    "objectID": "pages/070-worksheet.html",
    "href": "pages/070-worksheet.html",
    "title": "Worksheet",
    "section": "",
    "text": "This page contains a number of questions and exercises to give you a chance to practise what you have learned this session. You should create a new .py Python file for each exercise.\n\n\n\n\n\n\nExercise 1\n\n\n\nThe first exercise is to practise searching the documentation. From the list of modules in the standard library, find one that contains a function to give the current date and time.\nFill in the ... in the snippet below.\nimport ...\n\ntime_now = ...\n\nprint(time_now.isoformat())\nThe output should be something like the following, but with today’s date and time:\n2048-08-32T10:53:15.062603\n\n\n\n\n\n\n\n\nAnswer 1\n\n\n\n\n\nThe function we can use is datetime.datetime.now(). There is an example in that module as well.\n\n\n\nex1.py\n\nimport datetime\n\ntime_now = datetime.datetime.now()\n\nprint(time_now.isoformat())\n\n\n\n\nTerminal/Command Prompt\n\npython ex1.py\n\n\n\n2025-09-08T11:57:40.683947\n\n\n\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\nWrite a function which can accept a string as an argument and return the first word in that string. To start you off, here’s skeleton of what the function should look like.\ndef first_word(l):\n    ...\n    return ...\nyou should be able to use it like:\nsentence = \"This is a collection of words\"\nword = first_word(sentence)\nprint(word)\ngiving the output:\nThis\n\n\n\n\n\n\n\n\nAnswer 2\n\n\n\n\n\n\n\n\nex2.py\n\ndef first_word(l):\n    words = l.split()\n    the_first_word = words[0]\n    return the_first_word\n\nsentence = \"This is a collection of words\"\nword = first_word(sentence)\nprint(word)\n\n\nThis\n\n\n\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\nWrite a function called count_word_match which accepts three agruments:\n\na string which contains multiple words separated by spaces,\na string which gives the word that you want to count the occurrences of and\na boolean (True or False) which specifies whether the match should be case-sensitive.\n\ndef count_word_match(words, match, case_sensitive):\n    ...\n    return ...\nyou should be able to use it like:\ncount1 = count_word_match(\"To be or not to be\", \"to\", True)\nprint(count1)\n\ncount2 = count_word_match(\"To be or not to be\", \"to\", False)\nprint(count2)\ngiving the output:\n1\n2\n\n\n\n\n\n\n\n\nAnswer 3\n\n\n\n\n\n\n\n\nex3.py\n\ndef count_word_match(words, match, case_sensitive):\n    if not case_sensitive:\n        # Make both the words and the match a consistent case\n        words = words.casefold()\n        match = match.casefold()\n    \n    word_list = words.split()\n    \n    count = 0\n    for word in word_list:\n        if word == match:\n            count += 1\n    \n    return count\n\ncount1 = count_word_match(\"To be or not to be\", \"to\", True)\nprint(count1)\n\ncount2 = count_word_match(\"To be or not to be\", \"to\", False)\nprint(count2)\n\n\n1\n2\n\n\n\n\n\n\n\n\n\n\n\nExercise 4\n\n\n\nFor this exercise, you should write a function which can find references, like [4], in some text.\nIf the function is passed a string like:\n\"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\nit should return a list of integers like:\n[1, 3, 10, 7]\nThe function should be called find_references.\n\n\n\n\n\n\n\n\nAnswer 4\n\n\n\n\n\nThis exercise it tricker, but if you make some assumptions about the format of the input, you can make your life easier. For example, you can assume for now that every reference like [4] is surrounded by spaces. This allows str.split() to pull each one out as a “word”. You can also assume that every reference is an integer number.\n\n\n\nex4.py\n\ndef find_references(text):\n    words = text.split()\n    \n    refs = []\n    # For each word in the text\n    for word in words:\n        # if it's surrounded by square brackets\n        if word[0] == \"[\" and word[-1] == \"]\":\n            # grab the bit between the square brackets\n            reference = word[1:-1]\n            # convert it to a number\n            reference_number = int(reference)\n            refs.append(reference_number)\n    \n    return refs\n\nexample_text = \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nreferences = find_references(example_text)\n\nprint(references)\n\n\n[1, 3, 10, 7]\n\n\n\n\n\n\n\n\n\n\n\nExercise 5\n\n\n\nTake the function that you wrote in the last exercise and move it into a module called refs. You should then write a test file called test_refs.py containing:\nimport refs\n\ntext = \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nnumbers = refs.find_references(text)\n\nexpected = [1, 3, 10, 7]\nif numbers == expected:\n    print(\"Test passed\")\nelse:\n    print(\"Test failed:\", numbers, \"is not the same as\", expected)\nYou should make sure that the test passes when the test script is run with:\n\n\nTerminal/Command Prompt\n\npython test_refs.py\n\n\n\n\n\n\n\n\n\nAnswer 5\n\n\n\n\n\n\n\n\nrefs.py\n\ndef find_references(text):\n    words = text.split()\n    \n    refs = []\n    for word in words:\n        if word[0] == \"[\" and word[-1] == \"]\":\n            reference = word[1:-1]\n            reference_number = int(reference)\n            refs.append(reference_number)\n    \n    return refs\n\n\n\n\n\ntest_refs.py\n\nimport refs\n\ntext = \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nnumbers = refs.find_references(text)\n\nexpected = [1, 3, 10, 7]\nif numbers == expected:\n    print(\"Test passed\")\nelse:\n    print(\"Test failed:\", numbers, \"is not the same as\", expected)\n\n\nTest passed\n\n\n\n\nTerminal/Command Prompt\n\npython test_refs.py",
    "crumbs": [
      "Worksheet"
    ]
  },
  {
    "objectID": "pages/030-modules.html",
    "href": "pages/030-modules.html",
    "title": "Modules",
    "section": "",
    "text": "In the last chapter we saw how we can take sections of code and make them reusable in different contexts without having to copy and paste the code every time we want to use it in your script. By using functions we give the code block a name and define what it needs in order to do its job.\nFunctions are a step in the right direction but they still have the problem that to use functions from one script in another you will have to copy and paste them over. The answer to this is to move the functions to a common location which both scripts can access. The Python solution for this is modules. Just like we used modules from The Python Standard Library earlier, we can create our own modules too.\nContinuing with the example of the ounces_to_grams function from the last section, let’s see how we can use the function in other code, outside of that one script.\nTo demonstrate this, let’s look at the code in our convert.py file and think about the different role that parts of it are playing.\n\n\n\nconvert.py\n\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n\nweight_in_grams = ounces_to_grams(12)\n\nprint(f\"{weight_in_grams} g\")\n\n\nThere are two main categories of code in this file:\n\nThe function, ounces_to_grams is the sort of code which is useful in many different situations.\nThe code below which uses the function. This is specific code which has been written to solve today’s problem of converting a specific value.\n\nLet’s continue this though and make it explicit by moving the code for today’s problem into its own file recipe.py and delete that same code from convert.py:\n\n\n\nconvert.py\n\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n\n\n\n\n\nrecipes.py\n\nweight_in_grams = ounces_to_grams(12)\n\nprint(f\"{weight_in_grams} g\")\n\n\n340.19399999999996 g\n\n\nIf we try to run this new script now, you’ll get an error that it doesn’t know what ounces_to_grams is:\n\n\nTerminal/Command Prompt\n\npython recipes.py\n\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 weight_in_grams = ounces_to_grams(12)\n      3 print(f\"{weight_in_grams} g\")\n\nNameError: name 'ounces_to_grams' is not defined\n\n\n\nThis is because that function is indeed not defined in this script. We need to tell it to load the file which contains the function we want to use, using the import statement:\n\n\n\nrecipe.py\n\nimport convert\n\nweight_in_grams = convert.ounces_to_grams(12)\n\nprint(f\"{weight_in_grams} g\")\n\n\n\n\n340.19399999999996 g\n\n\nHere we have done a few things. First, on the first line we have imported our module. This is Python’s way of getting access to code which is inside other modules. You’ll notice that the way we do this is identical to when we were importing modules from the Standard Library (e.g. math) earlier.\nThe name of a module is the same as the name of the file but without the .py extension. So, since we saved our file above as convert.py, the name of the module is convert. Then, when calling the function, we need to explicily state that we’re using the ounces_to_grams function from the convert module using convert.ounces_to_grams.\n\n\n\n\n\n\nExercise\n\n\n\nDo the following:\n\nMake a module, morse (so the file name must be morse.py), and move the encode function from encode.py from the previous chapter into it. Delete it from the original file.\nMove the definition of the dictionary letter_to_morse into morse.py.\nEdit encode.py so that it imports the new module and calls the function from the new module.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n\n\nmorse.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\n\n\n\nencode.py\n\nimport morse\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\nencoded_message = morse.encode(message)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {encoded_message}\")\n\n\n\n\nTerminal/Command Prompt\n\npython encode.py\n\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nAdd into morse.py a function to convert Morse code to English. The code to do so is written below:\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\n\ndef decode(message):\n    english = []\n\n    # Now we cannot read by letter. We know that morse letters are\n    # separated by a space, so we split the morse string by spaces\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english_letter = morse_to_letter[letter]\n        english.append(english_letter)\n\n    # Rejoin, but now we don't need to add any spaces\n    english_message = \"\".join(english)\n    \n    return english_message\nThen write a new script decode.py which imports morse, calls the decode function and decodes the message \"... . -.-. .-. . - / -- . ... ... .- --. .\".\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\n\ndef decode(message):\n    english = []\n\n    # Now we cannot read by letter. We know that morse letters are\n    # separated by a space, so we split the morse string by spaces\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english_letter = morse_to_letter[letter]\n        english.append(english_letter)\n\n    # Rejoin, but now we don't need to add any spaces\n    english_message = \"\".join(english)\n    \n    return english_message\n\n\n\n\ndecode.py\n\nimport morse\n\nmessage = \"... . -.-. .-. . - / -- . ... ... .- --. .\"\n\ndecoded_message = morse.decode(message)\n\nprint(decoded_message)\n\n\n\n\nTerminal/Command Prompt\n\npython decode.py\n\n\n\nsecret message\n\n\n\n\n\n\n\n\n\n\n\nDefining aliases\n\n\n\nYou can assign an alias to a module, so you don’t need to type the full name every time. In the example above, we could do\n\n\n\nrecipe.py\n\nimport convert as c\n\nweight_in_grams = c.ounces_to_grams(12)\n\nprint(f\"{weight_in_grams} g\")\n\n\n340.19399999999996 g\n\n\nThere are a few conventions that is good to know, for example the module pandas is by convention imported as pd, and seaborn as sns. You will see these these modules on Introduction to Data Analysis in Python.\n\n\n\nTesting\nSo far we’ve been writing code and running it, but have you actually checked that the code is doing the right thing? Testing code is a very important part of the software development process because if you want other people to trust your work, you need to show that you’ve checked that your code does what you claim.\nThere are more formal methods for software testing but we’ll start with a common technique used with encoders/decoders and that is the round-trip. If we take a message, convert it to morse code and then convert it back, we should end up with the message we started with.\nMake a new file called test_morse.py:\n\n\n\ntest_morse.py\n\nimport morse\n\nmessage = \"sos we have hit an iceberg\"\n\ncode = morse.encode(message)\ndecode = morse.decode(code)\n\nprint(message == decode)\n\n\nWhen you run it, you should see True printed to the console terminal tells us that the round-trip was successful.\n\n\nTerminal/Command Prompt\n\npython test_morse.py\n\n\n\nTrue\n\n\nWe’ll cover move on how to write tests for your Python modules in the Best Practices in Sofware Engineering course but for now, this round-trip will suffice.",
    "crumbs": [
      "Modules"
    ]
  },
  {
    "objectID": "pages/022-writing-functions.html",
    "href": "pages/022-writing-functions.html",
    "title": "Writing functions",
    "section": "",
    "text": "In previous sections you edited a script that encodes messages to Morse code. The script is good, but is not very easy to use or reusable. For someone to make use of the script, they will have to edit it and copy and paste your code every time they want to encode a different message.\nFunctions provide a way of packaging code into reusable and easy-to-use components. We saw plenty of examples of functions in the last chapter, e.g. print() wraps up all the logic about exactly how to print things, all you need to do is pass in some arguments and it handles the rest. Likewise with math.sqrt(), you don’t need to understand the algorithm it uses, simply what it needs you to pass it, and what it returns back to you.\nYou can also bundle up your own logic into functions, allowing you to avoid repeating yourself and make your code easier to read. To explain how they work, lets imagine we are writing some code to help us with baking recipes. Often you will need to convert between different units, for example from ounces to grams. Create a new script convert.py with the below code and run it.\n\n\n\nconvert.py\n\nweight_in_ounces = 6\n\nweight_in_grams = weight_in_ounces * 28.3495\n\nprint(f\"{weight_in_grams} g\")\n\n\n170.09699999999998 g\n\n\nYou can see this script has three main parts:\n\nThe set-up where we define weight_in_ounces\nThe data-processing section where we read our inputs and create an output\nThe output section where we print our result to the screen\n\nThe data processing section will work regardless of what data is inside the variable weight_in_ounces and so we can grab that bit of code and make it usable in other contexts quite easily, using functions.\n\nDefining functions\nWe can turn this into a function that can convert ounces to grams by using def. To do this, type:\n\n\n\nconvert.py\n\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n\n\nThis has created a new function called ounces_to_grams which we can now call. In a similar fashion to other constructs in Python (like for loops and if statements) it has a rigid structure.\nFirst we must use the def keyword to start a function definition:\n ↓\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n\nThen we specify the name that we want to give the function. This is the name which we will use when calling the function. Like anything in Python, choose a descriptive name that describes what it does:\n           ↓\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n\nFunction definitions must then be followed by a pair of round brackets. This is a similar syntax to that used when calling a function and giving it arguments but here we’re just defining it. Between those brackets go the names of the parameters we want the function to accept (can be zero or more parameters). Here we are defining one:\n                   ↓      ↓\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n\nFinally, the line is completed with a colon. And since we’ve used a colon, we must indent the body of the function as we did with loops and conditional statements.\n                           ↓\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n\nMost functions will also want to return data back to the code that called it. You can choose what data is returned using the return keyword followed by the data you want to return:\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n      ↑\n\nNote that the body of the function has been copied from our script above with the only change being that the variables have different names and we added a return statement.\n\n\nCalling functions\nYou can now call the function using:\n\n\n\nconvert.py\n\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n\nweight_in_ounces = 6\n\nweight_in_grams = ounces_to_grams(weight_in_ounces)\n\nprint(f\"{weight_in_grams} g\")\n\n\n170.09699999999998 g\n\n\nIn this case you have called the function ounces_to_grams and passed in the argument weight_in_ounces. In the fuction, weight_in_ounces is copied to its internal variable, weight. The function ounces_to_grams then acts on weight, creating the new varaible new_weight. It then returns new_weight, which is assigned to weight_in_grams.\nYou can use your new ounces_to_grams function to convert any numbers. Try typing:\n\n\n\nconvert.py\n\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n\nweight_in_ounces = 999\n\nweight_in_grams = ounces_to_grams(weight_in_ounces)\n\nprint(f\"{weight_in_grams} g\")\n\n\n28321.1505 g\n\n\nNote that we can also pass the values to the function directly, e.g. type:\n\n\n\nconvert.py\n\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n\nweight_in_grams = ounces_to_grams(12)\n\nprint(f\"{weight_in_grams} g\")\n\n\n340.19399999999996 g\n\n\n\n\n\n\n\n\nExercise\n\n\n\nTake the following code:\nmy_num = 10\n\ndoubled = my_num * 2\n\nprint(doubled)\nand convert the multiplication part to a function called double which can be called like:\ndoubled = double(my_num)\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n\n\ndoubler.py\n\ndef double(num):\n    return num * 2\n\nmy_num = 10\n\ndoubled = double(my_num)\n\nprint(doubled)\n\n\n\n\nTerminal/Command Prompt\n\npython doubler.py\n\n\n\n20\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nTake the following code:\nmy_list = [5, 7, 34, 5, 3, 545]\n\nbig_numbers = []\nfor num in my_list:\n    if num &gt; 10:\n        big_numbers.append(num)\n\nprint(big_numbers)\nand convert the data-processing parts to a function called big which can be called like:\nmy_list = [5, 7, 34, 5, 3, 545]\n\nlarge_numbers = big(my_list)\n\nprint(large_numbers)\ngiving\n[34, 545]\nBe careful to pay attention to the indentation, ensuring that it is consistent with the original code. Particularly, note that the return statement will cause the function to exit, so make sure that it doesn’t run until after the loop has finished.\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nStarting from the initial code:\n\n\n\nbignums.py\n\nmy_list = [5, 7, 34, 5, 3, 545]\n\nbig_numbers = []\nfor num in my_list:\n    if num &gt; 10:\n        big_numbers.append(num)\n\nprint(big_numbers)\n\n\n[34, 545]\n\n\nWe pull out the middle four lines, indent them, put def big(numbers): in front and add return big_numbers to the end, paying careful attention to the indentation of the return statement. Finally, we update the variable name used in the function to match the argument name numbers:\n\n\n\nbignums.py\n\ndef big(numbers):\n    big_numbers = []\n    for num in numbers:\n        if num &gt; 10:\n            big_numbers.append(num)\n    return big_numbers\n\n\nmy_list = [5, 7, 34, 5, 3, 545]\n\nlarge_numbers = big(my_list)\n\nprint(large_numbers)\n\n\n[34, 545]\n\n\n\n\n\n\n\nHow many arguments?\nNote that you must pass in the right number of arguments to a function. ounces_to_grams expects one arguments, so if you pass more or less you will get an error. Try this now:\n\n\n\nconvert.py\n\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n\nweight_in_grams = ounces_to_grams()  # We've removed the arguments to this function\n\nprint(f\"{weight_in_grams} g\")\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[10], line 5\n      2     new_weight = weight * 28.3495\n      3     return new_weight\n----&gt; 5 weight_in_grams = ounces_to_grams()  # We've removed the arguments to this function\n      7 print(f\"{weight_in_grams} g\")\n\nTypeError: ounces_to_grams() missing 1 required positional argument: 'weight'\n\n\n\nAs you can see, Python tells you that you’ve given the function a wrong number of arguments. It expects 1 (weight). Likewise, if you give too many arguments you get a similar error:\n\n\n\nconvert.py\n\ndef ounces_to_grams(weight):\n    new_weight = weight * 28.3495\n    return new_weight\n\nweight_in_grams = ounces_to_grams(12, 10)  # We've passed too many arguments now\n\nprint(f\"{weight_in_grams} g\")\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[11], line 5\n      2     new_weight = weight * 28.3495\n      3     return new_weight\n----&gt; 5 weight_in_grams = ounces_to_grams(12, 10)  # We've passed too many arguments now\n      7 print(f\"{weight_in_grams} g\")\n\nTypeError: ounces_to_grams() takes 1 positional argument but 2 were given\n\n\n\nIt is possible to define functions that take no arguments:\n\ndef pi():\n    return 3.14159\n\nanswer = pi()\n\nsingle arguments:\n\ndef double(x):\n    return x * 2\n\nanswer = double(4)\n\nor lots of arguments:\n\ndef lots_of_args(a, b, c, d, e):\n    return {\"a\": a, \"b\": b, \"c\": c, \"d\": d, \"e\": e}\n\nanswer = lots_of_args(1, 2, 3, 4, 5)\n\n\n\n\n\n\n\nExercise\n\n\n\nTake encode.py from the previous chapter and edit it so that the part that does the conversion is moved into a function called encode. The function should take one argument and return the encoded morse string.\nTo be more explicit, replace the following lines of code:\nmorse = []\n\nfor letter in message:\n    letter = letter.lower()\n    morse_letter = letter_to_morse[letter]\n    morse.append(morse_letter)\n\nmorse_message = \" \".join(morse)\nwith:\ndef encode(message):\n    ...\n    \n    return ...\n\nmorse_message = encode(message)\nwhere the ... should be replaced with the code to do the conversion and the variable to be returned.\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nWe add a new function called encode which takes the exact code as before but with three changes:\n\ndef encode(message): added to the beginning\nThe code is indented by four spaces\nreturn morse_message added to the end\n\nWe then call our function with morse_message = encode(message)\n\n\n\nencode.py\n\nletter_to_morse = {'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n                   'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n                   'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n                   'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n                   '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n                   '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.',\n                   ' ':'/'}\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\nmorse_message = encode(message)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {morse_message}\")\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nMake a second file called decode.py with the contents:\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\nmessage = \"... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--\"\n\nenglish = []\n\n# Now we cannot read by letter. We know that morse letters are\n# separated by a space, so we split the morse string by spaces\nmorse_letters = message.split(\" \")\n\nfor letter in morse_letters:\n    english.append(morse_to_letter[letter])\n\n# Rejoin, but now we don't need to add any spaces\nenglish_message = \"\".join(english)\n\nprint(english_message)\nEdit decode.py so that the part that does the conversion (everything from english = [] to \"\".join(english)) is moved into a function. The function should take one argument, message and return the decoded english message.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nHere we make the same changes as with encode.py:\n\ndef decode(message): added to the beginning\nThe code is indented by four spaces\nreturn english_message added to the end\nCall the function\n\n\n\n\ndecode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\nmessage = \"... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--\"\n\n\ndef decode(message):\n    english = []\n\n    # Now we cannot read by letter. We know that morse letters are\n    # separated by a space, so we split the morse string by spaces\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english.append(morse_to_letter[letter])\n\n    # Rejoin, but now we don't need to add any spaces\n    english_message = \"\".join(english)\n    \n    return english_message\n\n\nprint(decode(message))\n\n\nsos we have hit an iceberg and need help quickly",
    "crumbs": [
      "Functions",
      "Writing functions"
    ]
  },
  {
    "objectID": "appendix/appendix_Classes.html",
    "href": "appendix/appendix_Classes.html",
    "title": "Classes and objects",
    "section": "",
    "text": "You’re perhaps starting to see a theme in this workshop so far. By introducing functions and then modules we’re creating reusable units which have defined interfaces (import this module, call this function with these arguments) which make it easier for people to use our code.\nWe’ve used functions to package up code which does things but as you saw when moving the code into the morse module, there’s also code in there which doesn’t exist to be called by a user but is rather just creating data which is used by the functions. The two are logically linked (the function won’t work without the data and the data isn’t useful without the functions).\nPython has a feature which allows us to combine code and data together into a single object which contains everything it needs to do anything we ask of it, these are classes. Classes are a way of creating a “template” which is then used to create objects which you can interact with.\nWith functions we were giving names to actions (or verbs) but with classes we can give names to concepts.\nImage that we want to write some code to represent our pet dog, Spot. The dog has a name and a colour. Based on the tools we know so far, we might represent this as a dictionary:\n\nour_dog = {\"name\": \"Spot\", \"colour\": \"brown\"}\n\nThe problem with a dictionary, however, is that if you’re passing it to a function you have to be very careful to ensure that it has all the keys correctly set that the function expects. For example, if there were a function describe which looks like:\n\ndef describe(dog):\n    return f\"{dog['name']} is {dog['colour']}\"\n\nprint(describe(our_dog))\n\nSpot is brown\n\n\nthen you would need to ensure that any data that was passed to it had the keys \"name\" and \"colour\". If they were missing you would get an error when you ran the code.\nWe can use classes to create a new type of data which represent all dogs and we can ensure that all data of this type always have the name and colour attributes.\n\nStarting our class\nWe would represent this as a class with:\n\nclass Dog:\n    def __init__(self, name, colour):\n        self.name = name\n        self.colour = colour\n\nThis has created a new data type called Dog which we can create instances of with:\n\nour_dog = Dog(\"Spot\", \"brown\")\n\nWe can ask for information from that instance using the dot syntax:\n\nprint(our_dog.name)\n\nSpot\n\n\nDog and our_dog are different kind of thing. Dog is called a class and can be seen as a template for creating dog objects. our_dog is one such object.\nYou can make multiple objects from a class, for example we can make a second dog, Fido with:\n\nother_dog = Dog(\"Fido\", \"grey\")\n\nand get information about that dog with the same attribute names on the new object:\n\nprint(other_dog.colour)\n\ngrey\n\n\nThis means that we can tweak our describe function to accept a Dog object and we can trust that it will always work. no matter which Dog we pass to it:\n\ndef describe(dog):\n    return f\"{dog.name} is {dog.colour}\"\n\nprint(describe(our_dog))\n\nSpot is brown\n\n\n\n\nWhat is __init__?\n__init__ is a function. It is a special function and is sometimes called the constructor or initialiser. It must be present in all classes, and constructors are used in all object orientated programming languages.\nThe job of the constructor is to set up the initial state of an object. In this case, you can see that the constructor creates two variables:\n\nname which will hold the name of the dog\nand colour which will hold a string describing the colour of the dog.\n\nNote that the variables are defined as attached to self, via the full stop, e.g. self.name. self is a special variable that is only available within the functions of the class and provides access to the current object that we are talking about. There is a full explanation of how self works below.\n__init__ is called automatically when an object of that class is created. In our case, when we call Dog(...) it will call __init__ for us.\nThe first time we called our_dog = Dog(\"Spot\", \"brown\"), self was referring at the object we were putting at our_dog so self.name is referring to the same thing as our_dog.name. The second time we called it it was referring to the object at other_dog.\nNote that while self is written in the function definition as if it were a parameter of __init__, we don’t need to pass it ourselves. self is passed implicitly by Python when we construct an object of the class.\n\n\nClass functions\nAt the moment, Dog isn’t giving us any real benefit above using a dictionary. It’s still just a container for data. One of the benefits of classes is being able to combine data and functionality in one place.\nMaking Dog as a class means that we can trust that if we pass a Dog to describe that it will definitely work but this has left us in a position where our data and functions are separate and we have to remember that describe takes a Dog object as its argument.\nWe can solve this by enforcing that the describe function can only ever be called on a Dog object by moving the function inside the class.\nTo move this function so that it is a part of the class we do two things:\n\nmove the lines of code into the class, indenting it appropriately\nreplace dog with self\n\nthis give us:\n\nclass Dog:\n    def __init__(self, name, colour):\n        self.name = name\n        self.colour = colour\n    \n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\n\nSince we have changed the code defining what a Dog is, we need to recreate our objects so that they know about the changes:\n\nour_dog = Dog(\"Spot\", \"brown\")\nother_dog = Dog(\"Fido\", \"grey\")\n\nWe can now call the describe function on each Dog object using the dot syntax:\n\nprint(our_dog.describe())\n\nSpot is brown\n\n\n\nprint(other_dog.describe())\n\nFido is grey\n\n\nWhen a function has been moved inside a class like this, it is sometimes referred to as a method but I use both terms.\nThere is now no way to call this function (or method) on any object which is not a Dog.\n\n\nAdding variable state\nHaving the bare facts about the dog is useful but we want to be able to make it a living, breathing thing. Let’s introduce the concept of “energy” for the dog. It will be a number which increases when we feed it and decreases when we exercise it.\nPreviously we added all object attributes as arguments to __init__ and then assigned them to self with self.name =. It is perfectly possible to set object attributes statically, without having them depend on the arguments that were passed in.\nFor example, we want our dog to have energy as an attribute. Let’s decide that by default, all Dogs have an energy of 1 when they are first created. We can assign the variable self.energy in __init__:\n\nclass Dog:\n    def __init__(self, name, colour):\n        self.name = name\n        self.colour = colour\n        self.energy = 1  # This is the only new line\n    \n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\n\nNow that we have energy as an attribute we can go ahead and write a function which uses it. We want our dog to be able to take our dog for a walk which will use up energy. We add another method to the class called exercise:\n\nclass Dog:\n    def __init__(self, name, colour):\n        self.name = name\n        self.colour = colour\n        self.energy = 1\n\n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\n    \n    def exercise(self):\n        print(f\"You take {self.name} for a walk\")\n        self.energy -= 1\n\nSee that in the exercise function we are accessing the energy with self.energy.\nWe can test that this is working by recreating our dog instance and seeing how calling exercise affects the dog’s energy:\n\nour_dog = Dog(\"Spot\", \"brown\")\nother_dog = Dog(\"Fido\", \"grey\")\n\n\nprint(our_dog.energy)\n\n1\n\n\n\nour_dog.exercise()\n\nYou take Spot for a walk\n\n\n\nprint(our_dog.energy)\n\n0\n\n\nAfter calling the exercise function, we can see that Spot’s energy has reduced by one.\nBut note that Fido’s energy has not been affected:\n\nprint(other_dog.energy)\n\n1\n\n\nLet’s complete the story by also implementing a function which we can use to feed our dog to give it energy:\n\nclass Dog:\n    def __init__(self, name, colour):\n        self.name = name\n        self.colour = colour\n        self.energy = 1\n    \n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\n    \n    def exercise(self):\n        print(f\"You take {self.name} for a walk\")\n        self.energy -= 1\n            \n    def feed(self):\n        print(f\"{self.name} eats the food\")\n        self.energy += 1\n\n\n\nAbout self\nThe existence and purpose of the self parameter in Python classes is often the most confusing thing when learning about them. To get to the point of seeing why it works the way it does, there’s a few things to clarify.\nThe code that we write that defines our class can be thought of as a template which will be used to create by every instance (object) of that class. This means that any code we write in there has to work and make sense for all objects that were made from the template. The functions we define in there therefore also need to be generic and work on all objects made from the class. The code we write must work as well for Spot as it does for Fido as well as for any other Dogs that may be created in the future.\nIf a function is generic, how can it know that at one point in your program it’s being called on object A and and some later time being called on object B? We do this by accepting to the function, as an parameter, the object that we’re calling it on. It is this that self is referring to.\nTo show this in action, let’s walk through an example:\nWe can construct as many instances (objects) of a class as we want, and each will have its own self and its own set of attributes:\n\nour_dog = Dog(\"Spot\", \"brown\")\nother_dog = Dog(\"Fido\", \"grey\")\n\nIf we describe our_dog we get:\n\nour_dog.describe()\n\n'Spot is brown'\n\n\nbut calling the same function on the other dog gives us a different result:\n\nother_dog.describe()\n\n'Fido is grey'\n\n\nLet’s go thorough that more slowly and see what self is doing along the way.\nFirst we called the Dog class like a function, passing it two arguments and assigned it to the variable our_dog:\nour_dog = Dog(\"Spot\", \"brown\")\nWhen you call a class like this, it makes a new object from the template and automtically calls the __init__ function behind the scenes. As we saw before, our __init__ has three parameters, self, name and colour. Python, when calling __init__ will automatically pass in our object (our_dog in this case) as the first argument and so inside the function, self is referring to our_dog, our newly created object.\nTherefore, we can imagine that our function which looks like:\ndef __init__(self, name, colour):\n    self.name = name\n    self.colour = colour\n    self.energy = 1\nis being treated like:\nself = our_dog\nname = \"Spot\"\ncolour = \"brown\"\n\nself.name = name\nself.colour = colour\nself.energy = 1\nand so here, self.name = name is effectively doing our_dog.name = \"Spot\".\nThe same thing happens when we create other_dog with:\nother_dog = Dog(\"Fido\", \"grey\")\nWe now know that due to the __init__ function operating on self, we now have two dogs where our_dog.name is \"Spot\" and other_dog.name is \"Fido\".\nNow that both of our objects have been fully created, we’re ready to start interacting with them by calling some functions.\nWhen we call the describe function, a similar process occurs:\nour_dog.describe()\nSince the our_dog object was made from the Dog class, our_dog.describe is referring to the describe function inside that class:\nclass Dog:\n    ...\n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\nand so\nour_dog.describe()\nit is effectively doing\nDog.describe(our_dog)\nand passing whatever object the describe function was called on as the first argument. Again, inside the function this is called self so when we do\nf\"{self.name} is {self.colour}\"\nit is essentially doing\nf\"{our_dog.name} is {our_dog.colour}\"\nTo summarise, the self parameter in class functions points at the object that the function was called on. The programmer calling the function does not pass the argument explicitly, it is done automatically by Python. This allows you to store data in one function (e.g. in __init__ doing self.name = name) and use it in another (e.g. in describe doing f\"{self.name} is {self.colour}\").\n\n\nData classes\nPython 3.7 (release June 2018) introduced a new feature called data classes which aim to simplify the common tasks of creating classes. If you can rely on having this version or newer of Python available then consider looking into using data classes.\n\nExercise\nIn the morse module, write a class called Message which we will use to hold a message in either English or Morse code. To start you off, here is the skeleton of some of the structure with ... where you will need to write some more code:\nclass Message:\n    def __init__(...):\n        ...\n    \n    def as_morse(self):\n        if self.is_morse:\n            ...\n        ...\n    \n    def ...\n\nThe __init__ should take one argument, message, which should be saved onto self like we did with colour in the Dog example.\nAdd an if/else statement in __init__ to check whether the passed message is a Morse message using \".\" in message or \"-\" in message. Use this to save a attribute onto self called is_morse which should be True if the message is in Morse code and False if it is in English.\nAdd two class functions: as_morse and as_english. as_morse should return the saved message directly if it was passed in to __init__ in Morse code or use the decode function to decode it otherwise. as_english should do the converse.\n\nWhen you have finished, test that the Morse code produced by your class is correctly translated back to English. Edit test_morse.py to read:\nfrom morse import Message\n\n# Convert English to Morse\nmy_message = Message(\"hello world\")\nmorse_string = my_message.as_morse()\n\n# Convert it back again\nincoming_message = Message(morse_string)\ndecoded_string = incoming_message.as_english()\n\nprint(decoded_string == \"hello world\")\nWhen run, it should print True, showing that your Message class can encode and decode the message.\nFeel free to look at the answer to guide you.\n\n\n\nNaming\nYou may have noticed a few different styles of naming used for things so far. We’ve been calling our data variables things like letter_to_morse while our class was called Message. The first style with all lower case letter and underscores to separate words is known as snake case and the style with upper case letters at the start of words but no spaces between them is known as camel case.\nPython has a document called PEP-8 which contains suggestions on how to format and name your code and it suggests: - variables: snake case like letter_to_morse or message - functions: snake case like encode or add_arrays - modules: snake case like morse or arrays - classes: camel case like Message or Dog\nThese are just suggestions and while they are followed by the majority of Python projects, if you are contributing to an existing Python project then you should follow their internal code style."
  },
  {
    "objectID": "appendix/aside_dataclasses.html",
    "href": "appendix/aside_dataclasses.html",
    "title": "Data classes",
    "section": "",
    "text": "The code for our Dog looked like this using traditional classes:\n\nclass Dog:\n    def __init__(self, name, colour):\n        self.name = name\n        self.colour = colour\n        self.energy = 1\n    \n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\n    \n    def exercise(self):\n        print(f\"You take {self.name} for a walk\")\n        self.energy -= 1\n            \n    def feed(self):\n        print(f\"{self.name} eats the food\")\n        self.energy += 1\n\nPython 3.7 (release June 2018) introduced a new feature called data classes since it was recognised that while classes can be used for very complicated things, most classes exist to hold simple data with a few functions to extract or update those data. Writing __init__ functions is boring with a lot of repetition and so data classes were created to automate some of the standard tasks when writing classes.\nTo turn our Dog class into a data class we first import the feature from the dataclasses module, we then apply it to our class using a decoration, @dataclass. We can then remove our __init__ function and replace it with a listing of attribute names, each tagged with the type of data that they should hold:\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Dog:\n    name: str\n    colour: str\n    energy: int = 1\n    \n    def describe(self):\n        return f\"{self.name} is {self.colour}\"\n    \n    def exercise(self):\n        print(f\"You take {self.name} for a walk\")\n        self.energy -= 1\n            \n    def feed(self):\n        print(f\"{self.name} eats the food\")\n        self.energy += 1\n\nAll the other functions in the class remain as they were.\nUsing the class works in exactly the same way:\n\nour_dog = Dog(\"Spot\", \"brown\")\n\n\nprint(our_dog.describe())\n\nSpot is brown\n\n\n\nprint(our_dog.energy)\n\n1\n\n\n\nour_dog.exercise()\n\nYou take Spot for a walk"
  },
  {
    "objectID": "answers/answer_morse_case.html",
    "href": "answers/answer_morse_case.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "The function str.lower gives you back a copy of the string, but all made into lower case.\nIn our situation, the first letter is “S” and so letter.lower() will give us \"s\".\n\n\n\nencode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\nmorse = []\n\nfor letter in message:\n    letter = letter.lower()  #  ← We have added this line of code\n    morse_letter = letter_to_morse[letter]\n    morse.append(morse_letter)\n\nmorse_message = \" \".join(morse)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {morse_message}\")\n\n\n\n\nTerminal/Command Prompt\n\npython encode.py\n\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--"
  },
  {
    "objectID": "answers/answer_morse_comprehension.html",
    "href": "answers/answer_morse_comprehension.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "encode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\ndef encode(message):\n\n    morse = [letter_to_morse[letter] for letter in message.lower()]\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\nencoded_message = encode(message)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {encoded_message}\")\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--"
  },
  {
    "objectID": "answers/answer_morse_raise.html",
    "href": "answers/answer_morse_raise.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "We have added some code to the beginning of morse.encode to check, in the case of the passed string being an English string, that it contains no !. If it does, we raise a ValueError:\n\nValueError: Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.\n\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    if \"!\" in message:                                            # ← new code\n        raise ValueError(f\"'!' is not valid in English strings\")  # ←\n    \n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\n\ndef decode(message):\n    english = []\n\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english_letter = morse_to_letter[letter]\n        english.append(english_letter)\n\n    english_message = \"\".join(english)\n    \n    return english_message"
  },
  {
    "objectID": "answers/answer_morse_exceptions.html",
    "href": "answers/answer_morse_exceptions.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "!rm -f morse.py\n\nmorse.py is the same as in the previous exercise. We have our test in Message.__init__ to check for !:\n\n%%writefile morse.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    if \"!\" in message:                                            # ← new code\n        raise ValueError(f\"'!' is not valid in English strings\")  # ←\n    \n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\n\ndef decode(message):\n    english = []\n\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english_letter = morse_to_letter[letter]\n        english.append(english_letter)\n\n    english_message = \"\".join(english)\n    \n    return english_message\n\nWriting morse.py\n\n\nIf we add some ! to our message_string in encode.py then we see our ValueError exception raised:\n\n%%writefile encode.py\n\nimport morse\n\nmessage = \"SOS We have hit an iceberg and need help quickly!!!!!\"  # ← Added ! to end of string\n\nencoded_message = morse.encode(message)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {encoded_message}\")\n\nWriting encode.py\n\n\n\n%run encode.py\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nFile ~/work/intro-python-2/intro-python-2/answers/encode.py:6\n      2 import morse\n      4 message = \"SOS We have hit an iceberg and need help quickly!!!!!\"  # ← Added ! to end of string\n----&gt; 6 encoded_message = morse.encode(message)\n      8 print(f\"Incoming message: {message}\")\n      9 print(f\"   Morse encoded: {encoded_message}\")\n\nFile ~/work/intro-python-2/intro-python-2/answers/morse.py:14, in encode(message)\n     12 def encode(message):\n     13     if \"!\" in message:                                            # ← new code\n---&gt; 14         raise ValueError(f\"'!' is not valid in English strings\")  # ←\n     16     morse = []\n     18     for letter in message:\n\nValueError: '!' is not valid in English strings\n\n\n\nMoving all that code into a try/except ValueError block we can catch the error and print something\n\n%%writefile encode.py\n\nimport morse\n\nmessage = \"SOS We have hit an iceberg and need help quickly!!!!!\"\n\ntry:\n    encoded_message = morse.encode(message)\n\n    print(f\"Incoming message: {message}\")\n    print(f\"   Morse encoded: {encoded_message}\")\nexcept ValueError as e:\n    print(f\"Could not encode message: {e}\")\n\nOverwriting encode.py\n\n\n\n%run encode.py\n\nCould not encode message: '!' is not valid in English strings\n\n\nPassing in a valid string (removing the !) results in the code running correctly:\n\n%%writefile encode.py\n\nimport morse\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"  # Removed ! from end of string\n\ntry:\n    encoded_message = morse.encode(message)\n\n    print(f\"Incoming message: {message}\")\n    print(f\"   Morse encoded: {encoded_message}\")\nexcept ValueError as e:\n    print(f\"Could not encode message: {e}\")\n\nOverwriting encode.py\n\n\n\n%run encode.py\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--"
  },
  {
    "objectID": "answers/answer_add_to_dictionary.html",
    "href": "answers/answer_add_to_dictionary.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "dict.py\n\nsounds = {\"cat\": \"meow\", \"dog\": \"woof\"}\n\nsounds[\"horse\"] = \"neigh\"\nsounds[\"cow\"] = \"moo\"\n\nprint(sounds)\n\n\n\n\nTerminal/Command Prompt\n\npython dict.py\n\n\n\n{'cat': 'meow', 'dog': 'woof', 'horse': 'neigh', 'cow': 'moo'}"
  },
  {
    "objectID": "answers/answer_function_big_numbers.html",
    "href": "answers/answer_function_big_numbers.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "Starting from the initial code:\n\n\n\nbignums.py\n\nmy_list = [5, 7, 34, 5, 3, 545]\n\nbig_numbers = []\nfor num in my_list:\n    if num &gt; 10:\n        big_numbers.append(num)\n\nprint(big_numbers)\n\n\n[34, 545]\n\n\nWe pull out the middle four lines, indent them, put def big(numbers): in front and add return big_numbers to the end, paying careful attention to the indentation of the return statement. Finally, we update the variable name used in the function to match the argument name numbers:\n\n\n\nbignums.py\n\ndef big(numbers):\n    big_numbers = []\n    for num in numbers:\n        if num &gt; 10:\n            big_numbers.append(num)\n    return big_numbers\n\n\nmy_list = [5, 7, 34, 5, 3, 545]\n\nlarge_numbers = big(my_list)\n\nprint(large_numbers)\n\n\n[34, 545]"
  },
  {
    "objectID": "answers/answer_morse_module_encode.html",
    "href": "answers/answer_morse_module_encode.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "morse.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\n\n\n\nencode.py\n\nimport morse\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\nencoded_message = morse.encode(message)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {encoded_message}\")\n\n\n\n\nTerminal/Command Prompt\n\npython encode.py\n\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--"
  },
  {
    "objectID": "answers/answer_hello_name.html",
    "href": "answers/answer_hello_name.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "To get input from the person running your script, you can use the function input(). And to get the length of your variable you can call len().\n\n\n\nhello.py\n\nmy_name = input(\"Please tell me your name: \")\n\nname_length = len(my_name)\n\nprint(f\"Hello {my_name}! Your name is {name_length} characters long\")\n\n\n\n\nPlease tell me your name: Jean\nHello Jean! Your name is 4 characters long"
  },
  {
    "objectID": "answers/answer_function_double.html",
    "href": "answers/answer_function_double.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "doubler.py\n\ndef double(num):\n    return num * 2\n\nmy_num = 10\n\ndoubled = double(my_num)\n\nprint(doubled)\n\n\n\n\nTerminal/Command Prompt\n\npython doubler.py\n\n\n\n20"
  },
  {
    "objectID": "utils/template.html",
    "href": "utils/template.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "FILENAME\n\nCODE\n\n\npython FILENAME\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 CODE\n\nNameError: name 'CODE' is not defined"
  },
  {
    "objectID": "answers/answer_morse_decode_function.html",
    "href": "answers/answer_morse_decode_function.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "Here we make the same changes as with encode.py:\n\ndef decode(message): added to the beginning\nThe code is indented by four spaces\nreturn english_message added to the end\nCall the function\n\n\n\n\ndecode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\nmessage = \"... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--\"\n\n\ndef decode(message):\n    english = []\n\n    # Now we cannot read by letter. We know that morse letters are\n    # separated by a space, so we split the morse string by spaces\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english.append(morse_to_letter[letter])\n\n    # Rejoin, but now we don't need to add any spaces\n    english_message = \"\".join(english)\n    \n    return english_message\n\n\nprint(decode(message))\n\n\nsos we have hit an iceberg and need help quickly"
  },
  {
    "objectID": "answers/answer_country_dictionary.html",
    "href": "answers/answer_country_dictionary.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "dict.py\n\ncapitals = {\n    \"France\": \"Paris\",\n    \"United Kingdom\": \"London\",\n    \"USA\": \"Washington DC\",\n    \"Kenya\": \"Nairobi\"\n}\n\nfor country, capital in capitals.items():\n    print(\"The capital of\", country, \"is\", capital)\n\n\nThe capital of France is Paris\nThe capital of United Kingdom is London\nThe capital of USA is Washington DC\nThe capital of Kenya is Nairobi"
  },
  {
    "objectID": "answers/answer_morse_module_decode.html",
    "href": "answers/answer_morse_module_decode.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "letter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\n\ndef decode(message):\n    english = []\n\n    # Now we cannot read by letter. We know that morse letters are\n    # separated by a space, so we split the morse string by spaces\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english_letter = morse_to_letter[letter]\n        english.append(english_letter)\n\n    # Rejoin, but now we don't need to add any spaces\n    english_message = \"\".join(english)\n    \n    return english_message\n\n\n\n\ndecode.py\n\nimport morse\n\nmessage = \"... . -.-. .-. . - / -- . ... ... .- --. .\"\n\ndecoded_message = morse.decode(message)\n\nprint(decoded_message)\n\n\n\n\nTerminal/Command Prompt\n\npython decode.py\n\n\n\nsecret message"
  },
  {
    "objectID": "answers/answer_morse_string_formatting.html",
    "href": "answers/answer_morse_string_formatting.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "The following code should be put into a file called encode.py using the text editor in JupyterLab:\n\n\n\nencode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\nmessage = \"please help\"\n\n# `morse` is a list which will eventually contain the \n# strings for each morse code letter in the message.\nmorse = []\n\nfor letter in message:\n    morse_letter = letter_to_morse[letter]\n    morse.append(morse_letter)\n\n# We need to join together Morse code letters with spaces\nmorse_message = \" \".join(morse)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {morse_message}\")\n\n\nIncoming message: please help\n   Morse encoded: .--. .-.. . .- ... . / .... . .-.. .--."
  },
  {
    "objectID": "answers/answer_morse_class.html",
    "href": "answers/answer_morse_class.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "We add the definition of the class Message to the top of the morse module.\n\n%%writefile morse.py\n\nclass Message:\n    def __init__(self, message):\n        self.message = message\n        \n        if \".\" in self.message or \"-\" in self.message:\n            self.is_morse = True\n        else:\n            self.is_morse = False\n    \n    def as_morse(self):\n        if self.is_morse:\n            return self.message\n        \n        return encode(self.message)\n    \n    def as_english(self):\n        if not self.is_morse:\n            return self.message\n        \n        return decode(self.message)\n\n################################################\n# Everything after here is identical to before #\n################################################\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\n\ndef decode(message):\n    english = []\n\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english_letter = morse_to_letter[letter]\n        english.append(english_letter)\n\n    english_message = \"\".join(english)\n    \n    return english_message\n\nWriting morse.py\n\n\nWe then change our test_morse.py file as directed:\n\n%%writefile test_morse.py\n\nfrom morse import Message\n\nmy_message = Message(\"hello world\")\nmorse_string = my_message.as_morse()\n\nincoming_message = Message(morse_string)\ndecoded_string = incoming_message.as_english()\n\nprint(decoded_string == \"hello world\")\n\nWriting test_morse.py\n\n\n\n%run test_morse.py\n\nTrue"
  },
  {
    "objectID": "answers/answer_first_dictionary.html",
    "href": "answers/answer_first_dictionary.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "dict.py\n\nsounds = {\"cat\": \"meow\", \"dog\": \"woof\", \"horse\": \"neigh\"}\n\ndog_sound = sounds[\"dog\"]\nhorse_sound = sounds[\"horse\"]\n\nprint(\"Dog goes\", dog_sound)\nprint(\"Horse goes\", horse_sound)\n\n\nDog goes woof\nHorse goes neigh\n\n\nIf we edit our script so that it asks for a key that doesn’t exist, we will see an error being produced:\n\n\n\ndict.py\n\nsounds = {\"cat\": \"meow\", \"dog\": \"woof\", \"horse\": \"neigh\"}\n\nfish_sound = sounds[\"fish\"]\n\nprint(fish_sound)\n\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[2], line 3\n      1 sounds = {\"cat\": \"meow\", \"dog\": \"woof\", \"horse\": \"neigh\"}\n----&gt; 3 fish_sound = sounds[\"fish\"]\n      5 print(fish_sound)\n\nKeyError: 'fish'"
  },
  {
    "objectID": "answers/answer_morse_encode_function.html",
    "href": "answers/answer_morse_encode_function.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "We add a new function called encode which takes the exact code as before but with three changes:\n\ndef encode(message): added to the beginning\nThe code is indented by four spaces\nreturn morse_message added to the end\n\nWe then call our function with morse_message = encode(message)\n\n\n\nencode.py\n\nletter_to_morse = {'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n                   'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n                   'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n                   'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n                   '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n                   '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.',\n                   ' ':'/'}\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\nmorse_message = encode(message)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {morse_message}\")\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--"
  },
  {
    "objectID": "answers/answer_practice_questions.html",
    "href": "answers/answer_practice_questions.html",
    "title": "Worksheet answers",
    "section": "",
    "text": "## Exercise 1\nThe function we can use is datetime.datetime.now(). There is an example in that module as well.\n\n%%writefile ex1.py\n\nimport datetime\n\ntime_now = datetime.datetime.now()\n\nprint(time_now.isoformat())\n\nWriting ex1.py\n\n\n\n%run ex1.py\n\n2025-09-08T11:57:06.345197\n\n\n## Exercise 2\n\n%%writefile ex2.py\n\ndef first_word(l):\n    words = l.split()\n    the_first_word = words[0]\n    return the_first_word\n\nsentence = \"This is a collection of words\"\nword = first_word(sentence)\nprint(word)\n\nWriting ex2.py\n\n\n\n%run ex2.py\n\nThis\n\n\n## Exercise 3\n\n%%writefile ex3.py\n\ndef count_word_match(words, match, case_sensitive):\n    if not case_sensitive:\n        # Make both the words and the match a consistent case\n        words = words.casefold()\n        match = match.casefold()\n    \n    word_list = words.split()\n    \n    count = 0\n    for word in word_list:\n        if word == match:\n            count += 1\n    \n    return count\n\ncount1 = count_word_match(\"To be or not to be\", \"to\", True)\nprint(count1)\n\ncount2 = count_word_match(\"To be or not to be\", \"to\", False)\nprint(count2)\n\nWriting ex3.py\n\n\n\n%run ex3.py\n\n1\n2\n\n\n## Exercise 4\nThis exercise it tricker, but if you make some assumptions about the format of the input, you can make your life easier. For example, you can assume for now that every reference like [4] is surrounded by spaces. This allows str.split() to pull each one out as a “word”. You can also assume that every reference is an integer number.\n\n%%writefile ex4.py\n\ndef find_references(text):\n    words = text.split()\n    \n    refs = []\n    # For each word in the text\n    for word in words:\n        # if it's surrounded by square brackets\n        if word[0] == \"[\" and word[-1] == \"]\":\n            # grab the bit between the square brackets\n            reference = word[1:-1]\n            # convert it to a number\n            reference_number = int(reference)\n            refs.append(reference_number)\n    \n    return refs\n\nexample_text = \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nreferences = find_references(example_text)\n\nprint(references)\n\nWriting ex4.py\n\n\n\n%run ex4.py\n\n[1, 3, 10, 7]\n\n\n\nAlternative solution\nIf you are familiar with regular expressions (we haven’t covered them in this course, so you might not be) then you can use this pattern matching language to extract the references. This is more reliable as the above method does not work if there is, e.g., no space between the ] and the next letter: bad ref [3]..\nIn this case, the regular expression \\[(\\d+)\\] means: find an openning square bracket (\\[), followed by one or more (+) digits (\\d), followed by a closing square bracket (\\]). If you find that, then pull out the digit part (()). It’s a very concise way of describing a pattern.\n\n%%writefile ex4_re.py\n\nimport re\n\ndef find_references(text):\n    ref_matches = re.findall(r\"\\[(\\d+)\\]\", text)\n    \n    ref_numbers = []\n    for ref in ref_matches:\n        ref_numbers.append(int(ref))\n        \n    return ref_numbers\n\nexample_text = \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nreferences = find_references(example_text)\n\nprint(references)\n\nWriting ex4_re.py\n\n\n\n%run ex4_re.py\n\n[1, 3, 10, 7]\n\n\n## Exercise 5\n\n%%writefile refs.py\n\ndef find_references(text):\n    words = text.split()\n    \n    refs = []\n    for word in words:\n        if word[0] == \"[\" and word[-1] == \"]\":\n            reference = word[1:-1]\n            reference_number = int(reference)\n            refs.append(reference_number)\n    \n    return refs\n\nWriting refs.py\n\n\n\n%%writefile test_refs.py\n\nimport refs\n\ntext = \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nnumbers = refs.find_references(text)\n\nexpected = [1, 3, 10, 7]\nif numbers == expected:\n    print(\"Test passed\")\nelse:\n    print(\"Test failed:\", numbers, \"is not the same as\", expected)\n\nWriting test_refs.py\n\n\n\n%run test_refs.py\n\nTest passed"
  },
  {
    "objectID": "answers/answer_string_methods.html",
    "href": "answers/answer_string_methods.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "You can split any string using the str.split function. By default it splits on spaces:\n\ns = \"what is your name\"\ns.split()\n\n['what', 'is', 'your', 'name']\n\n\n\nJoin a list\nYou can join a list together by using the str.join function. Note that in front of the dot you put the string that you want to join with, and you pass the list you want to join together as an argument.\n\nl = [\"a\", \"b\", \"c\"]\n\"-\".join(l)\n\n'a-b-c'\n\n\n\nl = [\"a\", \"b\", \"c\"]\n\":\".join(l)\n\n'a:b:c'\n\n\n\nl = [\"a\", \"b\", \"c\"]\n\" \".join(l)\n\n'a b c'"
  },
  {
    "objectID": "appendix/aside_zip.html",
    "href": "appendix/aside_zip.html",
    "title": "Intermediate Python",
    "section": "",
    "text": "The zip function provides a way to loop over more that one list at once. It takes two arguments, each of which should be a list and gives you back something you can loop over.\nFor example, imagine we have the two lists a and b:\n\na = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\n\nwe can pass them to the zip function and have a look at what it returns:\n\nzip(a, b)\n\n&lt;zip at 0x7f7f88b47f40&gt;\n\n\nhmm, this doesn’t look very useful, it’s just returned us a zip?\nIn fact, it has given us back a zip object. This is an object which, when looped over, will give us the elements one at a time. The reason it is done like this is that it means that it only has to calculate the elements as it goes along rather than doing them all up-front. This is termed a lazy iterator and is something which crops up often in Python.\nTo force it to give us all the elemnts at once, we can turn it into a list by using the list function:\n\nlist(zip(a, b))\n\n[(1, 5), (2, 6), (3, 7), (4, 8)]\n\n\nThat looks more useful! It is a list where each element is a pair of values. The first element is the pair 1, 5. This has come from the first element in a (1) and the first element in b (5).\nThe second element in the list is 2, 6 which has come from the second element in each input list.\nWe can see this in a slightly different way by looping over the result of the zip rather than passing it to the list function:\n\nfor element in zip(a, b):\n    print(element)\n\n(1, 5)\n(2, 6)\n(3, 7)\n(4, 8)\n\n\nAgain we see that the pairs have been printed out, taken from each input list.\nWe can break the element into its parts using indexing notation:\n\nfor element in zip(a, b):\n    print(f\"from a: {element[0]}, from b: {element[1]}\")\n\nfrom a: 1, from b: 5\nfrom a: 2, from b: 6\nfrom a: 3, from b: 7\nfrom a: 4, from b: 8\n\n\nThe downside of this is that we have to remember that element[0] refers to a. Instead, we can break the pair apart directly in the for loop by providing a name for each part:\n\nfor from_a, from_b in zip(a, b):\n    print(f\"from a: {from_a}, from b: {from_b}\")\n\nfrom a: 1, from b: 5\nfrom a: 2, from b: 6\nfrom a: 3, from b: 7\nfrom a: 4, from b: 8\n\n\nThat should give you enough understanding of the zip fucntion to follow what our array-adding code is doing."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Welcome to this second course on Python programming! This course builds upon Beginning Python and delves deeper into working with advanced data structures, write functions, explore modules, and how to handle errors and exceptions. Get ready to take your Python skills to the next level!\nFor the purpose of this course we will be using a free tool called JupyterLab which provides you with a local editor and Python terminal in your web browser. Setting up instructions can be found here.\n\nIntended learning outcomes\nBy the end of this course, you will:\n\nKnow how to use lists and dictionaries\nUse and write functions\nUse and write modules\nHandle errors and exceptions\n\n\n\nHow to read this documentation\nIn this documentation, any time that we are seeing a small snippet of Python code, we’ll see it written in a grey box like the following:\nprint(\"Hello, Python\")\nIf the commands are executed by the machine we will see the output of them below enclosed on a vertical purple line:\n\nprint(\"Hello, Python!\")\n\nHello, Python!\n\n\nBy contrast, you will see larger peces of code as scripts with a given name, e.g. script.py, in a code block with darker header:\n\n\nscript.py\n\ngreeting = \"Hello\"\nname = input(\"What is your name? \")\nprint(greeting, name)\n\nWe may ask you to run a script using the Command Prompt (Windows) or Terminal (Mac and Linux). We will show you what commands to run and will look like this:\n\n\nTerminal/Command Prompt\n\npython script.py\n\nPlease note that sometimes we will skip showing the execution of scripts on the Terminal/Command Prompt box, but we will assume you to run the script on your.\nIn some cases we will introduce general programming concepts and structures using pseudocode, a high-level, easy-to-read syntax close to natural language. This should not be confused with Python code and cannot be executed on your machine, but it is useful to describe how your code should behave. Here there is an example:\nFOR EACH sample IN my_study\n    IF (sample.value &gt; 100)\n        DO SOMETHING\n    OTHERWISE\n        DO SOMETHING ELSE\nThere are some exercises along this course, and it is important you try to answer them yourself to understand how Python works. Exercises are shown in blue boxes followed by a yellow box that contains the answer of each exercise. We recommend you to try to answer each exercise yourself before looking at the solution.\n\n\n\n\n\n\nExercise\n\n\n\nThis is an exercise. You will need to click in the below box to see the answer.\n\n\n\n\n\n\n\n\nAnswer (click to open)\n\n\n\n\n\nThis is the answer.\n\n\n\nLast, we will highlight important points using green boxes like this one:\n\n\n\n\n\n\nKey points\n\n\n\nThese are important concepts and technical notes.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "pages/020-functions.html",
    "href": "pages/020-functions.html",
    "title": "Functions",
    "section": "",
    "text": "You are likely already comfortable with calling functions such as:\n\nfree functions like print() and range()\nfunctions on objects (also called methods) like my_list.append() and my_str.split()\n\nIn this section we’re going to explore other functions and methods available as part of Python’s core capabilities and in other modules. An important technical resource you probably will come across often is The Python Standard Library.\n\nBuilt-in functions\nPython comes with a bunch of functionality that you can use without having to explicitly enable anything. This includes things like integers, strings, lists, print()ing, file open()ing etc.\nFirst, lets have a peek at the built-in functions. There is a page describing these under the “Library Reference”, in a page called Built-in Functions. There we find the documentation for many of the functions we’ve already been using, for example print() and max().\nIt is worth, over time, becoming familiar with the various functions that are available. Some are quite useful for everyday work and some are more niche.\n\n\n\n\n\n\nExercise\n\n\n\nCopy the following code into a new script hello.py:\nmy_name = ...\n\nname_length = ...\n\nprint(f\"Hello {my_name}! Your name is {name_length} characters long\")\nReplace the first ... with a call to a built-in function which will read input from the person running the script. Replace the second ... with a call to a function which will give the length of the string my_name. When executed, the script should print out:\nPlease tell me your name: Jean\nHello Jean! Your name is 4 characters long\nIf you need it, you can search through the built-in functions page to find the appropriate functions.\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nTo get input from the person running your script, you can use the function input(). And to get the length of your variable you can call len().\n\n\n\nhello.py\n\nmy_name = input(\"Please tell me your name: \")\n\nname_length = len(my_name)\n\nprint(f\"Hello {my_name}! Your name is {name_length} characters long\")\n\n\n\n\nPlease tell me your name: Jean\nHello Jean! Your name is 4 characters long\n\n\n\n\n\n\n\nMethods for built-in data types\nPython has a bunch of built-in data types, the details of them all are on the page called Built-in Types. That is the place to go to check what you can do with a str, an int, a list or a dict. There’s also a few other built-in types you might want to look into in the future such as complex, set and tuple.\nThese types being built-in means that you don’t need to explicitly enable their use and most have core-language syntax to create them.\nFor example, the code\n\nanimal = \"horse\"\n\ncreates a variable called animal from the string literal \"horse\" which is of the type str. This data type is built into the language and so the functionality that it has is documented on built-in type str.\nThis means that when we do:\nanimal.capitalize()\nit is looking at the data type of the variable animal, seeing that it is a str and then using the capitalize function that’s available for that type to do the work.\n\n\n\n\n\n\nExercise\n\n\n\nHave a look at the documentation page for the functions that you can call on strings.\nExperiment with one or two and see if you can understand the documentation. Start by trying to answer the following:\n\nGiven a string like s = \"what is your name\", find a function which can split s into a list like [\"what\", \"is\", \"your\", \"name\"]\nGiven a list like [\"a\", \"b\", \"c\"], find a function which can join it together into a string like \"a-b-c\"\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nYou can split any string using the str.split function. By default it splits on spaces:\n\ns = \"what is your name\"\ns.split()\n\n['what', 'is', 'your', 'name']\n\n\n\nJoin a list\nYou can join a list together by using the str.join function. Note that in front of the dot you put the string that you want to join with, and you pass the list you want to join together as an argument.\n\nl = [\"a\", \"b\", \"c\"]\n\"-\".join(l)\n\n'a-b-c'\n\n\n\nl = [\"a\", \"b\", \"c\"]\n\":\".join(l)\n\n'a:b:c'\n\n\n\nl = [\"a\", \"b\", \"c\"]\n\" \".join(l)\n\n'a b c'\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nChange the message in encode.py to use both upper and lower case letters:\nmessage = \"SOS We have hit an iceberg and need help quickly\"\nWhen you now run the script with python encode.py you will find that it gives you a KeyError. This is because it is looking for an upper case “S” in the dictionary letter_to_morse and not finding one (dictionary keys are case-sensitive).\nRead through the documentation for the string methods to find one that might help convert the letter you have into one that matches the keys in the dictionary. You should be able to add a single line of code in the loop straight after for letter in message:.\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe function str.lower gives you back a copy of the string, but all made into lower case.\nIn our situation, the first letter is “S” and so letter.lower() will give us \"s\".\n\n\n\nencode.py\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\nmessage = \"SOS We have hit an iceberg and need help quickly\"\n\nmorse = []\n\nfor letter in message:\n    letter = letter.lower()  #  ← We have added this line of code\n    morse_letter = letter_to_morse[letter]\n    morse.append(morse_letter)\n\nmorse_message = \" \".join(morse)\n\nprint(f\"Incoming message: {message}\")\nprint(f\"   Morse encoded: {morse_message}\")\n\n\n\n\nTerminal/Command Prompt\n\npython encode.py\n\n\n\nIncoming message: SOS We have hit an iceberg and need help quickly\n   Morse encoded: ... --- ... / .-- . / .... .- ...- . / .... .. - / .- -. / .. -.-. . -... . .-. --. / .- -. -.. / -. . . -.. / .... . .-.. .--. / --.- ..- .. -.-. -.- .-.. -.--",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "pages/990-contributors.html",
    "href": "pages/990-contributors.html",
    "title": "Contributors",
    "section": "",
    "text": "This course was originally written by Christopher Woods and published at https://chryswoods.com/intermediate_python/. Over many years of delivering the course at the University of Bristol, changes were made by the University’s Advanced Computing Research Centre (ACRC). Under ACRC, the course development was led by Matt Williams, see https://milliams.com/courses/intermediate_python/.\nThe course has since been modified by the Jean Golding Institute.\n\nChristopher Woods\nMatt Williams\nLéo Gorman\nJames Thomas\nPau Erola",
    "crumbs": [
      "Contributors"
    ]
  },
  {
    "objectID": "pages/040-errors-exceptions.html",
    "href": "pages/040-errors-exceptions.html",
    "title": "Errors and Exceptions",
    "section": "",
    "text": "Exceptions are Python’s error-handling system. You’ve probably come across exceptions as that’s how Python lets you know when you’ve done something wrong! They’re not just there to tell you off, a good error message is to tell you that the computer has got into a situation where it doesn’t know what to do and is asking you, the programmer, to help it by giving more information.\nHere we will use the module convert.py and script recipe.py we created in the previous section.\n\nChecking the value of data\nWhen you create a function you are creating a sort of contract. In this case, you are agreeing that if you call the function ounces_to_grams, this will “take whatever value you passed as an argument, interpret it as a mass in grams and return the corresponding mass in ounces”. It might seem silly to write that out in full like that but it’s a useful exercise to help make decisions about what the function should do in potentially unexpected situations. What should happen if you passed the string \"banana\"? Most users of your function would not expect that and it’s more likely that it’s a mistake that they’ve made. Good functions are easily explained and predictable and avoid guessing what the user meant. How though, can we let the person who called our function that there is a problem?\nLet’s look at a simple example to demonstrate how we can write some code in our function to help the person calling it understand if they make a mistake. Our function converts masses and since there’s no such thing as a negative mass we need to decide what will happen if someone passes in a negative value. At the moment it will just return a negative mass:\n\n\n\nrecipe.py\n\nimport convert\n\nweight_in_grams = convert.ounces_to_grams(-30)\n\nprint(f\"{weight_in_grams} g\")\n\n\n\n\n-850.485 g\n\n\nWe need to decide what happens in situations like this. For the purpose of this section, we want a negative mass to be impossible so we need to add in some code to check for it. The easiest place to start could be by adding an if statement and printing out an informative message:\n\n\n\nconvert.py\n\ndef ounces_to_grams(weight):\n    if weight &lt; 0:\n        print(\"Cannot convert negative mass\")\n    \n    new_weight = weight * 28.3495\n    return new_weight\n\n\n\n\nTerminal/Command Prompt\n\npython recipe.py\n\n\n\nCannot convert negative mass\n-850.485 g\n\n\nWe see the message printed out, but the function has gone ahead and still returned the negative mass. What we want is a way to have the function display the message and stop running. We could stop the function at that point by returning something, but what? If we return something like 0 or -1 to designate the failure mode, then the person calling the function could quite easily carry on without noticing, assuming that it’s a mass.\n     def ounces_to_grams(weight):\n        if weight &lt; 0:\n            print(\"Cannot convert negative mass\")\n            # ... at this point we want to stop running the function\n\n        new_weight = weight * 28.3495\n        return new_weight\n\n\nRaising exceptions\nPython solves this by allowing us to raise exceptions. An exception is an error message which the person calling the code cannot ignore which is useful as it helps prevent them write incorrect code.\nWe can replace our print function call with the raise statement which we follow with the type of error we are notifying the user about.\nA list of all Python exception types is here. It is important to choose the correct exception type for the error you are reporting. In our case, there is a problem with the value that the user is passing into our function, so I have chosen ValueError:\n\n\n\nconvert.py\n\ndef ounces_to_grams(weight):\n    if weight &lt; 0:\n        raise ValueError(\"Cannot convert negative mass\")\n    \n    new_weight = weight * 28.3495\n    return new_weight\n\n\nNow when we run our code, it will display the error:\n\n\nTerminal/Command Prompt\n\npython recipe.py\n\n\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[8], line 5\n      2 sys.path.append('../scripts')\n      3 import convert_exception\n----&gt; 5 weight_in_grams = convert_exception.ounces_to_grams(-30)\n      7 print(f\"{weight_in_grams} g\")\n\nFile ~/work/intro-python-2/intro-python-2/pages/../scripts/convert_exception.py:3, in ounces_to_grams(weight)\n      1 def ounces_to_grams(weight):\n      2     if weight &lt; 0:\n----&gt; 3         raise ValueError(\"Cannot convert negative mass\")\n      5     new_weight = weight * 28.3495\n      6     return new_weight\n\nValueError: Cannot convert negative mass\n\n\n\nNotice that the result of the function has not been displayed. This is because Python will stop running the script once an exception is raised. This means that we cannot accidentally ignore the error and use the erroneous value.\nYou have almost certainly seen error message like this crop up when writing your own code. Hopefully, now that you know how to create them yourself, they have become a little less scary!\n\n\n\n\n\n\nExercise\n\n\n\nIf we give our Morse code functions a string which can’t be converted, e.g. \"hi!\" or \"m'aidez\" then we expect it to result in an error.\nAdd a check to the start of the encode function to raise an exception if the passed message is not valid.\nAt this point, don’t worry about writing a check that’s perfect, just think of one thing that you would check for and raise an exception if you see that. Start with some code that looks something like:\nif ... message ...:\n    raise ...\nYou’ll also need to choose an appropriate exception type to raise. Take a look at the Standard Library and find the exception which makes sense if an incorrect value is passed in.\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nWe have added some code to the beginning of morse.encode to check, in the case of the passed string being an English string, that it contains no !. If it does, we raise a ValueError:\n\nValueError: Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.\n\n\nletter_to_morse = {\n    'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n    'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n    'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n    'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n    '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n    '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', ' ':'/'\n}\n\n\ndef encode(message):\n    if \"!\" in message:                                            # ← new code\n        raise ValueError(f\"'!' is not valid in English strings\")  # ←\n    \n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse_letter = letter_to_morse[letter]\n        morse.append(morse_letter)\n\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\n# We need to invert the dictionary. This will create a dictionary\n# that can go from the morse back to the letter\nmorse_to_letter = {}\nfor letter in letter_to_morse:\n    morse = letter_to_morse[letter]\n    morse_to_letter[morse] = letter\n\n\ndef decode(message):\n    english = []\n\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english_letter = morse_to_letter[letter]\n        english.append(english_letter)\n\n    english_message = \"\".join(english)\n    \n    return english_message",
    "crumbs": [
      "Errors and Exceptions"
    ]
  },
  {
    "objectID": "pages/012-dictionaries.html",
    "href": "pages/012-dictionaries.html",
    "title": "Dictionaries",
    "section": "",
    "text": "Lists let you store lots of variables, and to access them by their location in the list. However, there are times when you may want to access them using more complex relationships. One example is a dictionary, which lets you store variables and access them using a key.\nDictionaries in Python are created using curly brackets. Make a new file called dict.py with the below code and run it:\n\n\n\ndict.py\n\nsounds = {\"cat\": \"meow\", \"dog\": \"woof\", \"horse\": \"neigh\"}\n\ncat_sound = sounds[\"cat\"]\n\nprint(cat_sound)\n\n\nmeow\n\n\nWhat we did here was create a dictionary on the first line. A dictionary is created using curly brackets ({}). The dictionary we created here has three items in it where each item comprises a key and a value. The value is the data that we want to keep hold of and the key is the label we use to find the data we want. The key and value are separated by a colon and each key-value pair is separated by a comma.\nOn the second line we access the data in the dictionary sounds. Like lists we use the square brackets to ask questions of our data. In this case we are asking the dictionary to give us the value associated with the key \"cat\" and so it will return to us meow.\nSince dictionaries can be quite large and it can sometimes be hard to see which parts are keys and which are values, it is possible to write dictionaries over multiple lines, one line per key-value item as in:\n\n\n\ndict.py\n\nsounds = {\n    \"cat\": \"meow\",\n    \"dog\": \"woof\",\n    \"horse\": \"neigh\"\n}\n\ncat_sound = sounds[\"cat\"]\n\nprint(cat_sound)\n\n\n\n\n\n\n\n\nExercise\n\n\n\nEdit dict.py to ask for the sound for the dog and the horse. What happens if you ask for an animal that isn’t in the dictionary?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n\n\ndict.py\n\nsounds = {\"cat\": \"meow\", \"dog\": \"woof\", \"horse\": \"neigh\"}\n\ndog_sound = sounds[\"dog\"]\nhorse_sound = sounds[\"horse\"]\n\nprint(\"Dog goes\", dog_sound)\nprint(\"Horse goes\", horse_sound)\n\n\nDog goes woof\nHorse goes neigh\n\n\nIf we edit our script so that it asks for a key that doesn’t exist, we will see an error being produced:\n\n\n\ndict.py\n\nsounds = {\"cat\": \"meow\", \"dog\": \"woof\", \"horse\": \"neigh\"}\n\nfish_sound = sounds[\"fish\"]\n\nprint(fish_sound)\n\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[4], line 3\n      1 sounds = {\"cat\": \"meow\", \"dog\": \"woof\", \"horse\": \"neigh\"}\n----&gt; 3 fish_sound = sounds[\"fish\"]\n      5 print(fish_sound)\n\nKeyError: 'fish'\n\n\n\n\n\n\n\nAdding new data into dictionaries\nAs with lists, dictionaries are dynamic so we can add entries into a dictionary.\nLet’s say that we want to add in a new sound for a cow into our sounds dictionary. The key that the data will have will be cow and the value will be moo. To do so we put sounds[\"cow\"] on the left-hand side of a variable assignment expression, as if we’re making a new variable. On the right goes the data that we want to put into the dictionary:\n\n\n\ndict.py\n\nsounds = {\n    \"cat\": \"meow\",\n    \"dog\": \"woof\",\n    \"horse\": \"neigh\"\n}\n\nsounds[\"cow\"] = \"moo\"\n\nprint(sounds)\n\n\nThis is saying that we want the value \"moo\" associated with the key \"cow\" in the dictionary sounds.\nRunning it, we see:\n\n\nTerminal/Command Prompt\n\npython dict.py\n\n\n\n{'cat': 'meow', 'dog': 'woof', 'horse': 'neigh', 'cow': 'moo'}\n\n\n\n\n\n\n\n\nExercise\n\n\n\nEdit dict.py so that the dictionary is initially defined with only the cat and dog entries. Add the entry for the horse and then the cow dynamically.\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n\n\ndict.py\n\nsounds = {\"cat\": \"meow\", \"dog\": \"woof\"}\n\nsounds[\"horse\"] = \"neigh\"\nsounds[\"cow\"] = \"moo\"\n\nprint(sounds)\n\n\n\n\nTerminal/Command Prompt\n\npython dict.py\n\n\n\n{'cat': 'meow', 'dog': 'woof', 'horse': 'neigh', 'cow': 'moo'}\n\n\n\n\n\n\n\nLooping over dictionaries\nWhen discussing for loops you were told that Python allows you to loop over lots of different types of data such as lists, strings and ranges. We can add dictionaries to that set.\nTo discover how it works, let’s do the naïve thing first and just see what happens when we loop over a dictionary:\n\n\n\ndict.py\n\nsounds = {\n    \"cat\": \"meow\",\n    \"dog\": \"woof\",\n    \"horse\": \"neigh\"\n}\n\nfor animal in sounds:\n    print(animal)\n\n\ncat\ndog\nhorse\n\n\nYou will recognise those as the keys from the dictionary. So, it seems that when looping over a dictionary we will be given the keys.\nWhat if, for example, you wanted to loop over the values instead. Well, there is a method on dictionaries called values which gives you just those so that you can loop over them:\n\n\n\ndict.py\n\nsounds = {\n    \"cat\": \"meow\",\n    \"dog\": \"woof\",\n    \"horse\": \"neigh\"\n}\n\nfor sound in sounds.values():\n    print(sound)    \n\n\nmeow\nwoof\nneigh\n\n\nIf we want to loop over the dictionary and get both the keys and the values, there is a method called items. Since it will be giving us two things each loop iteration, we’ll have to use the same trick as we did with enumerate and give two variable names in the for loop declaration:\n\n\n\ndict.py\n\nsounds = {\n    \"cat\": \"meow\",\n    \"dog\": \"woof\",\n    \"horse\": \"neigh\"\n}\n\nfor animal, sound in sounds.items():\n    print(animal, \"goes\", sound)\n\n\ncat goes meow\ndog goes woof\nhorse goes neigh\n\n\nThe items method gives us two pieces of data where the first is always the key and the second if always the value. We give the keys the name animal and the values the name sound. We can then use both those variables in the loop body.\n\n\nUses for dictionaries\nDictionaries can be used for any key-value mapping. The example above was a mapping of an animal species (as a string) to an animal sound (as a string). You can use any data type you wish as the value in a dictionary, for example you might make a dictionary containing the population of some cities in millions (as a float):\n\ncensus = {\n    \"London\": 8.615,\n    \"Paris\": 2.244,\n    \"Rome\": 2.627,\n}\n\nor one which contains a list of authors as the key (as a string) and their books (as a list of strings):\n\nbookshelf = {\n    \"Terry Pratchett\": [\"Mort\", \"Jingo\", \"Truckers\"],\n    \"Jane Austen\": [\"Sense and Sensibility\", \"Pride and Prejudice\"],\n    \"Charles Dickens\": [\"Oliver Twist\"],\n}\n\n\n\n\n\n\n\nExercise 3\n\n\n\nMake a dictionary with the keys being the name of countries and the value being the country’s capital city. Loop over the dictionary and print something like \"The capital of France is Paris\" for each item.\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n\n\ndict.py\n\ncapitals = {\n    \"France\": \"Paris\",\n    \"United Kingdom\": \"London\",\n    \"USA\": \"Washington DC\",\n    \"Kenya\": \"Nairobi\"\n}\n\nfor country, capital in capitals.items():\n    print(\"The capital of\", country, \"is\", capital)\n\n\nThe capital of France is Paris\nThe capital of United Kingdom is London\nThe capital of USA is Washington DC\nThe capital of Kenya is Nairobi\n\n\n\n\n\n\n\n\n\n\n\nData objects for loops\n\n\n\nTo summarise the different things we can pass to loops and the data that we get on each iteration:\n\nlist: the items in the list\nstr: the characters in the string\nenumerate(): a pair of the index of the item and the item itself\ndict: the keys of the dictionary\ndict.keys(): the keys from the dictionary\ndict.values(): the values from the dictionary\ndict.items(): the key-value pairs from the dictionary",
    "crumbs": [
      "Using advanced data types and methods",
      "Dictionaries"
    ]
  },
  {
    "objectID": "pages/021-importing-functions.html",
    "href": "pages/021-importing-functions.html",
    "title": "Importing functions from modules",
    "section": "",
    "text": "While there are a good number of built-in functions and types, and you can go a long way without needing anything more, they are ultimately limited. Luckily, Python has a “batteries included” philosophy and provides a lot of additional functionality which can be explored in The Python Standard Library.\nThe functionality provided by the Standard Library is provided in a series of modules, each of which serves a particular purpose. The modules in the Standard Library are always installed in any version of Python you have. Note that even though they are always accessible, they do not count as “built-in” as in Python terms, that means something which you can use without having to access any extra modules.\n\nThe math module\nLet’s start by looking at one of the modules, the “math — Mathematical functions” module. This module provides a bunch of mathematical tools such as averages, trigonometry etc.\nYou can get access to the module by importing it by name:\n\nimport math\n\nOnce it is imported, you can use any of the functions inside it by typing the name of the module, followed by a dot, followed by the name of the function. So to call the square root function you would do:\n\n\n\nimports.py\n\nimport math\n\nprint(math.sqrt(25))\n\n\n5.0\n\n\nYou can think of this as saying “from the math module that I’ve just imported, get the sqrt function and call it”.\nAlternatively, if you want to grab a specific function out of a module so that you can call it without specifying the module name, you can do:\n\n\n\nimports.py\n\nfrom math import sqrt\n\nprint(sqrt(25))\n\n\n5.0\n\n\nNote that we have seen two examples of places where dot . is used when calling functions in Python:\n\ncalling a method on a variable like with my_list.append() or my_string.split(),\ncalling a function from an imported module like math.sqrt().\n\nIn both these cases the dot is doing a very similar job. It’s saying “look inside the thing on the left of the dot for a thing called …”. In some cases, it’s looking inside a data type, and in other it’s looking inside a module.\n\n\n\n\n\n\nExercise\n\n\n\nWe saw earlier how to check our current working directory in the Command Prompt/Terminal using cd (Windows) and pwd (MacOS and Linux). Using the The Python Standard Library, find a function that returns the working directory in Python.\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nOne possible solution is to use the module os - Miscellaneous operating system interfaces.\nimport os\n\ncurrent_directory = os.getcwd()\nprint(\"CWD:\", current_directory)\n\n\nCWD: /Users/JGI/Training/Python/intermediate-python/",
    "crumbs": [
      "Functions",
      "Importing functions from modules"
    ]
  },
  {
    "objectID": "pages/010-advanced-data-types.html",
    "href": "pages/010-advanced-data-types.html",
    "title": "Using advanced data types and methods",
    "section": "",
    "text": "In Beginning Python we saw different basic data types (integers, floats, booleans and strings) and a data structure called list (an ordered, mutable sequence that can contain heterogeneous elements) and how to perform basic operations with it (indexing, slicing and adding elements).\nPython provides several other powerful built-in data types and methods that allow you to work with more complex data structures. In this section, we will see how to perform more advanced operations with strings and lists, and we will introduce a new data structure called dictionary. Understanding how to effectively use these data structures is crucial for writing efficient code.",
    "crumbs": [
      "Using advanced data types and methods"
    ]
  }
]