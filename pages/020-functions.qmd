---
title: Functions
jupyter: python3
---


You are likely already comfortable with *calling functions* such as:

- free functions like `print()` and `range()`
- functions on objects (also called *methods*) like `my_list.append()` and `my_str.split()`

In this section we're going to explore other functions and methods available as part of Python's core capabilities and in other modules. An important technical resource you probably will come across often is [The Python Standard Library](https://docs.python.org/3/library/).

## Built-in functions

Python comes with a bunch of functionality that you can use without having to explicitly enable anything. This includes things like integers, strings, lists, `print()`ing, file `open()`ing etc.

First, lets have a peek at the *built-in functions*. There is a page describing these under the "Library Reference", in a page called [Built-in Functions](https://docs.python.org/3/library/functions.html). There we find the documentation for many of the functions we've already been using, for example [`print()`](https://docs.python.org/3/library/functions.html#print) and [`max()`](https://docs.python.org/3/library/functions.html#max).

It is worth, over time, becoming familiar with the various functions that are available. Some are quite useful for everyday work and some are more niche.

::: {#exercise-1 .callout-note title="Exercise" icon=false} 

Copy the following code into a notebook cell and run it:

```python
my_name = ...

name_length = ...

print(f"Hello {my_name}! Your name is {name_length} characters long")
```

Replace the first `...` with a call to a built-in function which will read *input* from the person running the code cell.
Replace the second `...` with a call to a function which will give the *length* of the string `my_name`. When executed, the code cell should print out:

```
Please tell me your name: Jean
Hello Jean! Your name is 4 characters long
```

If you need it, you can search through the [built-in functions page](https://docs.python.org/3/library/functions.html) to find the appropriate functions.

:::

::: {#answer1 .callout-caution icon=false title='Answer' collapse="true"}
{{< include ../answers/answer_hello_name.qmd >}}
:::

## Methods for built-in data types

Python has a bunch of built-in *data types*, the details of them all are on the page called [Built-in Types](https://docs.python.org/3/library/stdtypes.html). That is the place to go to check what you can do with a `str`, an `int`, a `list` or a `dict`. There's also a few other built-in types you might want to look into in the future such as `complex`, `set` and `tuple`.

These types being built-in means that you don't need to explicitly enable their use and most have core-language syntax to create them.

For example, the code

```{python}
animal = "horse"
```

creates a variable called `animal` from the string literal `"horse"` which is of the type `str`. This data type is built into the language and so the functionality that it has is documented on [built-in type `str`](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str).

This means that when we do:

```python
animal.capitalize()
```

it is looking at the data type of the variable `animal`, seeing that it is a `str` and then using the `capitalize` function that's available for that type to do the work.

::: {#exercise2 .callout-tip title="Exercise" icon=false} 
Have a look at the documentation page for the [functions that you can call on strings](https://docs.python.org/3/library/stdtypes.html#string-methods).

Experiment with one or two and see if you can understand the documentation. Start by trying to answer the following:

1. Given a string like `s = "what is your name"`, find a function which can split `s` into a list like `["what", "is", "your", "name"]`
2. Given a list like `["a", "b", "c"]`, find a function which can join it together into a string like `"a-b-c"`

:::

::: {#answer2 .callout-caution icon=false title='Answer' collapse="true"}
{{< include ../answers/answer_string_methods.qmd >}}
:::


::: {#exercise3 .callout-note title="Exercise" icon=false} 
Change the message in `encode.py` to use both upper and lower case letters:

```python
message = "SOS We have hit an iceberg and need help quickly"
```

When you now run the script with `python encode.py` you will find that it gives you a `KeyError`. This is because it is looking for an upper case "S" in the dictionary `letter_to_morse` and not finding one (dictionary keys are case-sensitive).

Read through the documentation for the [string methods](https://docs.python.org/3/library/stdtypes.html#string-methods) to find one that might help convert the letter you have into one that matches the keys in the dictionary. You should be able to add a single line of code in the loop straight after `for letter in message:`.

:::

::: {#answer3 .callout-caution icon=false title='Answer' collapse="true"}
{{< include ../answers/answer_morse_case.qmd >}}
:::
